upstream unicorn_<%= @application[:domains].first %> {
 server unix:<%= @application[:deploy_to]%>/shared/sockets/unicorn.sock fail_timeout=0;
}

server {
  listen 80 default;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;

  <% if @application[:log_format] %>
    <% @application[:log_format].each do |log_format_name| %>
      <% if node[:nginx][:log_format][log_format_name] %>
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>.access.<%= log_format_name %>.log <%= log_format_name %>;
      <% end %>
    <% end %>
  <% else %>
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>.access.log;
  <%end %>

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    more_set_headers 'Access-Control-Allow-Origin: *';

    # tricky hack to redirect to https with exceptions
    if ($http_x_forwarded_proto != 'https') {
      set $should_redirect_to_https 1;
    }
    # when the user is accessing through a custom domain
    if ($host !~* "mailee") {
      set $should_redirect_to_https 0;
    }
    # when there is a POST to go_controller
    if ($uri ~ "add_contact_form") {
      set $should_redirect_to_https 0;
    }
    if ($uri ~ "remove_contact_form") {
      set $should_redirect_to_https 0;
    }
    if ($should_redirect_to_https) {
      rewrite ^ https://$host$request_uri? permanent;
    }



  <% if node[:nginx] && node[:nginx][:proxy_read_timeout] -%>
    proxy_read_timeout <%= node[:nginx][:proxy_read_timeout] %>;
  <% end -%>
  <% if node[:nginx] && node[:nginx][:proxy_send_timeout] -%>
    proxy_send_timeout <%= node[:nginx][:proxy_send_timeout] %>;
  <% end -%>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  # Drop non rails requests
  location ~ \.(asp|aspx|php|jsp|cgi)$ {
    return 410;
  }

  # Mailee.me specific redirects
  # even with the paths below changed on maileed, we need this to
  # take care of the clients with custom urls

  # empty image for delivery count
  location /go/view/ {
    rewrite      ^ http://event-api.mailee.me$request_uri? permanent;
  }

  # external link
  location /go/click {
    rewrite      ^ http://event-api.mailee.me$request_uri? permanent;
  }

  # this is to keep the assets of old messages working
  location ~* /(clients|contacts|galleries|header_images|messages|templates|wireframes)/\d+/\w+/\w+/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^ http://assets.mailee.me$request_uri?;
  }

  location ~* /tmp/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^ http://assets.mailee.me$request_uri?;
  }

  location ~* /clients/[\w-]+/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^/clients(/.*)$ http://tassets.mailee.me$1;
  }

  location ~* /clients/[\w-]+/\w+/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^/clients(/.*)$ http://tassets.mailee.me$1;
  }

  location ~* /clients/[\w-]+/\w+/\w+/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^/clients(/.*)$ http://tassets.mailee.me$1;
  }

  location ~* /clients/[\w-]+/\w+/\w+/\w+/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^/clients(/.*)$ http://tassets.mailee.me$1;
  }

  location ~* ^\/\b([\w-]+)\b(?<!assets)\/[\w-]+\/.*\.(gif|jpg|jpeg|png|bmp|tiff|svg)$ {
    rewrite      ^ http://tassets.mailee.me$request_uri?;
  }


  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }
}

<% if @application[:ssl_support] %>
server {
  listen   443 default;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>-ssl.access.log;

  ssl on;
  ssl_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.crt;
  ssl_certificate_key /etc/nginx/ssl/<%= @application[:domains].first %>.key;
  <% if @application[:ssl_certificate_ca] -%>
  ssl_client_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.ca;
  <% end -%>

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

  <% if node[:nginx] && node[:nginx][:proxy_read_timeout] -%>
    proxy_read_timeout <%= node[:nginx][:proxy_read_timeout] %>;
  <% end -%>
  <% if node[:nginx] && node[:nginx][:proxy_send_timeout] -%>
    proxy_send_timeout <%= node[:nginx][:proxy_send_timeout] %>;
  <% end -%>

    more_set_headers 'Access-Control-Allow-Origin: *';

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  # empty image for delivery count
  location /go/view/ {
    rewrite      ^ https://event-api.mailee.me$request_uri? permanent;
  }

  # external link
  location /go/click {
    rewrite      ^ https://event-api.mailee.me$request_uri? permanent;
  }
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }
}
<% end %>

server {
    listen       80;
    server_name  mailee.me;
    return       301 http://www.mailee.me$request_uri;
}
